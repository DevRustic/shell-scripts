#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

SETUP_FLAG="/var/local/server_setup_completed"

if [[ -f "$SETUP_FLAG" ]]; then
    echo -e "${YELLOW}The setup script has already been run.${NC}"
    read -p "Do you want to run specific parts of the script? (yes/no) " run_partial
    if [[ "$run_partial" =~ ^[Yy]es$ ]]; then
        echo -e "${BLUE}Select the part to run:${NC}"
        echo -e "1. Update and upgrade system"
        echo -e "2. Configure SSH and firewall"
        echo -e "3. Install Docker"
        echo -e "4. Configure Fail2Ban"
        echo -e "5. Custom MOTD setup"
        echo -e "6. Reboot system"
        read -p "Enter your choice: " choice
        case $choice in
            1) echo -e "${BLUE}Updating and upgrading system...${NC}"; sudo apt update && sudo apt upgrade -y ;;
            2) echo -e "${BLUE}Reapplying SSH and firewall settings...${NC}"; /* Add SSH/Firewall part here */ ;;
            3) echo -e "${BLUE}Reinstalling Docker...${NC}"; /* Add Docker install part here */ ;;
            4) echo -e "${BLUE}Reconfiguring Fail2Ban...${NC}"; /* Add Fail2Ban config part here */ ;;
            5) echo -e "${BLUE}Reapplying custom MOTD settings...${NC}"; /* Add MOTD setup part here */ ;;
            6) echo -e "${BLUE}Rebooting system...${NC}"; sudo reboot ;;
            *) echo -e "${RED}Invalid choice.${NC}" ;;
        esac
        exit
    else
        echo -e "${GREEN}Exiting without changes.${NC}"
        exit
    fi
fi

# Your full script content here, ensuring the "Last User" and "sudo su" fixes are included

# Update MOTD "Last Login" to "Last User"
sudo tee /etc/update-motd.d/01-custom > /dev/null <<'EOF'
#!/bin/bash
echo "========================================================"
echo "   🖥️  System Information"
echo "========================================================"
echo -e "Hostname       : $(hostname)"
echo -e "OS             : $(lsb_release -d | cut -f2)"
echo -e "Kernel         : $(uname -r)"
echo -e "CPU Usage      : $(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')%"
echo -e "RAM Usage      : $(free -m | awk '/Mem:/ {printf "%.2f%% (%dMB/%dMB)", $3/$2*100, $3, $2}')"
echo -e "Disk Usage     : $(df -h / | awk '/\// {print $5 " (" $3 "/" $2 ")"}')"
echo -e "System Load    : $(uptime | awk -F'load average:' '{print $2}' | xargs)"
echo -e "IPv4 Address   : $(hostname -I | awk '{print $1}')"
echo -e "Processes      : $(ps -e | wc -l)"
echo -e "Users Logged In: $(who | wc -l)"
echo -e "Last User      : $(last | head -n 1 | awk '{print $1, $3, $4, $5, $6, $7}')"
echo "========================================================"
EOF

# Properly disable password-based sudo and su
echo -e "${BLUE}Disabling password-based sudo and su authentication...${NC}"
sudo tee -a /etc/sudoers.d/nopassword > /dev/null <<EOF
Defaults        passwd_timeout=0
Defaults:ALL    !authenticate
EOF
sudo chmod 440 /etc/sudoers.d/nopassword

# Reboot option
read -p "Do you want to reboot the server now? (yes/no) " reboot_now
if [[ "$reboot_now" =~ ^[Yy]es$ ]]; then
    echo -e "${GREEN}Rebooting the server...${NC}"
    sudo reboot
fi

# Mark the script as run
sudo mkdir -p $(dirname $SETUP_FLAG)
sudo touch $SETUP_FLAG
echo -e "${GREEN}Setup script completed.${NC}"

#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

SETUP_FLAG="/var/local/server_setup_completed"

# Check if the script has already run
if [[ -f "$SETUP_FLAG" ]]; then
    echo -e "${YELLOW}The setup script has already been run.${NC}"
    read -p "Do you want to run specific parts of the script? (yes/no) " run_partial
    if [[ "$run_partial" =~ ^[Yy]es$ ]]; then
        echo -e "${BLUE}Select the part to run:${NC}"
        echo -e "1. Update and upgrade system"
        echo -e "2. Configure SSH and firewall"
        echo -e "3. Install Docker"
        echo -e "4. Configure Fail2Ban"
        echo -e "5. Custom MOTD setup"
        echo -e "6. Reboot system"
        read -p "Enter your choice: " choice
        case $choice in
            1) echo -e "${BLUE}Updating and upgrading system...${NC}"; sudo apt update && sudo apt upgrade -y ;;
            2) echo -e "${BLUE}Reconfiguring SSH and firewall...${NC}"
               sudo systemctl restart sshd
               sudo ufw --force enable
               ;;
            3) echo -e "${BLUE}Reinstalling Docker...${NC}"
               sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
               sudo systemctl start docker
               ;;
            4) echo -e "${BLUE}Reconfiguring Fail2Ban...${NC}"
               sudo systemctl restart fail2ban
               ;;
            5) echo -e "${BLUE}Reapplying custom MOTD setup...${NC}"
               sudo chmod -x /etc/update-motd.d/*
               sudo chmod +x /etc/update-motd.d/01-custom
               ;;
            6) echo -e "${BLUE}Rebooting system...${NC}"
               sudo reboot
               ;;
            *) echo -e "${RED}Invalid choice.${NC}" ;;
        esac
        exit
    else
        echo -e "${GREEN}Exiting without changes.${NC}"
        exit
    fi
fi

# Start full setup
echo -e "${BLUE}--- Welcome to the Ubuntu Server Setup Script ---${NC}"

# Prompt the user for the target username
read -p "Enter the username to upload the public key to: " target_user
if id "$target_user" &>/dev/null; then
    echo -e "${GREEN}User $target_user exists.${NC}"
else
    echo -e "${RED}Error: User $target_user does not exist. Please create the user first.${NC}"
    exit 1
fi

# Prompt the user for the GitHub username
read -p "Enter the GitHub username for SSH public key setup: " github_username

# Validate the input
if [[ -z "$github_username" ]]; then
    echo -e "${RED}Error: GitHub username cannot be empty.${NC}"
    exit 1
fi

# Ask if Docker should be installed
read -p "Do you want to install Docker and Docker Compose? (yes/no) " install_docker

# Detect the current timezone for autofill
current_timezone=$(timedatectl | grep "Time zone" | awk '{print $3}')

# Prompt the user for the timezone, with current timezone autofilled
read -p "Enter the timezone (e.g., UTC) [Default: $current_timezone]: " user_timezone
if [[ -z "$user_timezone" ]]; then
    user_timezone=$current_timezone
fi

# Ask if the user wants to change the SSH port
read -p "Do you want to change the default SSH port (22)? (yes/no) " change_ssh_port
if [[ "$change_ssh_port" =~ ^[Yy]es$ ]]; then
    read -p "Enter the new SSH port: " new_ssh_port
    if [[ $new_ssh_port =~ ^[0-9]+$ ]] && ((new_ssh_port > 1024 && new_ssh_port <= 65535)); then
        echo -e "${GREEN}Changing SSH port to $new_ssh_port...${NC}"
        sudo sed -i "s/^#Port 22/Port $new_ssh_port/" /etc/ssh/sshd_config
        sudo ufw allow $new_ssh_port
        sudo ufw delete allow 22
        echo -e "${YELLOW}SSH port changed to $new_ssh_port. Remember to connect using this port!${NC}"
    else
        echo -e "${RED}Invalid port. Keeping default SSH port 22.${NC}"
    fi
fi

# Update and Upgrade the System
echo -e "${BLUE}Updating and upgrading the system...${NC}"
sudo apt update && sudo apt upgrade -y

# Install Useful Tools and Utilities
echo -e "${BLUE}Installing essential tools and utilities...${NC}"
sudo apt install -y net-tools curl wget git vim htop unzip zip software-properties-common build-essential ufw fail2ban tmux ncdu

# Enable UFW Firewall and Open Common Ports
echo -e "${BLUE}Configuring UFW firewall...${NC}"
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow https
sudo ufw --force enable

# Configure SSH for Key-Based Authentication
echo -e "${BLUE}Configuring SSH for public key authentication only...${NC}"
sudo sed -i 's/^#*\(PasswordAuthentication\) .*/\1 no/' /etc/ssh/sshd_config
sudo sed -i 's/^#*\(PubkeyAuthentication\) .*/\1 yes/' /etc/ssh/sshd_config
sudo sed -i 's/^#*\(AuthenticationMethods\) .*/\1 publickey/' /etc/ssh/sshd_config

# Fetch the public key from the GitHub account and append it to authorized_keys
echo -e "${BLUE}Fetching public key from GitHub for user: ${GREEN}$github_username${NC}..."
sudo -u "$target_user" bash -c "mkdir -p /home/$target_user/.ssh && curl -s https://github.com/${github_username}.keys >> /home/$target_user/.ssh/authorized_keys"

# Set the appropriate permissions
sudo chmod 700 /home/"$target_user"/.ssh
sudo chmod 600 /home/"$target_user"/.ssh/authorized_keys
sudo chown -R "$target_user":"$target_user" /home/"$target_user"/.ssh

# Restart SSH service
echo -e "${BLUE}Restarting SSH service...${NC}"
sudo systemctl restart ssh

# Set Timezone and Synchronize Time
echo -e "${BLUE}Configuring timezone to ${GREEN}$user_timezone${NC}..."
sudo timedatectl set-timezone "$user_timezone"
sudo apt install -y chrony
sudo systemctl enable chrony
sudo systemctl start chrony

# Install Docker and Docker-Compose (optional)
if [[ "$install_docker" =~ ^[Yy]es$ ]]; then
    echo -e "${BLUE}Installing Docker and Docker-Compose...${NC}"
    sudo apt install -y apt-transport-https ca-certificates software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    sudo usermod -aG docker $USER
    echo -e "${GREEN}Docker installation complete. Please logout and login again to apply Docker group changes.${NC}"
else
    echo -e "${YELLOW}Skipping Docker installation.${NC}"
fi

# Configure Fail2Ban with custom jail.local
echo -e "${BLUE}Setting up Fail2Ban with custom configuration...${NC}"
sudo tee /etc/fail2ban/jail.local > /dev/null <<'EOF'
[DEFAULT]
bantime = 10m
findtime = 10m
maxretry = 5

[sshd]
enabled = true
port = ssh
EOF
sudo systemctl restart fail2ban
echo -e "${GREEN}Fail2Ban installed and configured.${NC}"

# Create a custom MOTD (Message of the Day)
echo -e "${BLUE}Setting up a custom login message (MOTD)...${NC}"
sudo tee /etc/update-motd.d/01-custom > /dev/null <<'EOF'
#!/bin/bash
echo "========================================================"
echo "   🖥️  System Information"
echo "========================================================"
echo -e "Hostname       : $(hostname)"
echo -e "OS             : $(lsb_release -d | cut -f2)"
echo -e "Kernel         : $(uname -r)"
echo -e "CPU Usage      : $(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')%"
echo -e "RAM Usage      : $(free -m | awk '/Mem:/ {printf "%.2f%% (%dMB/%dMB)", $3/$2*100, $3, $2}')"
echo -e "Disk Usage     : $(df -h / | awk '/\// {print $5 " (" $3 "/" $2 ")"}')"
echo -e "System Load    : $(uptime | awk -F'load average:' '{print $2}' | xargs)"
echo -e "IPv4 Address   : $(hostname -I | awk '{print $1}')"
echo -e "Processes      : $(ps -e | wc -l)"
echo -e "Users Logged In: $(who | wc -l)"
echo -e "Last User      : $(last -n 1 | awk '{print $1, $3, $4, $5, $6, $7}')"
echo "========================================================"
EOF
sudo chmod +x /etc/update-motd.d/01-custom
sudo chmod -x /etc/update-motd.d/*
sudo chmod +x /etc/update-motd.d/01-custom
echo -e "${GREEN}Custom MOTD created.${NC}"

# Clean Up Unnecessary Files
echo -e "${BLUE}Cleaning up unnecessary files...${NC}"
sudo apt autoremove -y
sudo apt autoclean -y

# Mark the script as completed
sudo mkdir -p $(dirname $SETUP_FLAG)
sudo touch $SETUP_FLAG

# Reboot Option
read -p "Do you want to reboot the server now? (yes/no) " reboot_now
if [[ "$reboot_now" =~ ^[Yy]es$ ]]; then
    echo -e "${GREEN}Rebooting the server...${NC}"
    sudo reboot
fi

echo -e "${YELLOW}--- Server Setup Complete! ---${NC}"
